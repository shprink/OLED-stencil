/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/redux';


declare global {
  interface HTMLAppHomeElement extends HTMLStencilElement {

  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLMyAppElement extends HTMLStencilElement {

  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLOledPixelElement extends HTMLStencilElement {
    'color': string;
    'size': number;
    'x': number;
    'y': number;
  }
  var HTMLOledPixelElement: {
    prototype: HTMLOledPixelElement;
    new (): HTMLOledPixelElement;
  };
  interface HTMLElementTagNameMap {
    'oled-pixel': HTMLOledPixelElement;
  }
  interface ElementTagNameMap {
    'oled-pixel': HTMLOledPixelElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'oled-pixel': JSXElements.OledPixelAttributes;
    }
  }
  namespace JSXElements {
    export interface OledPixelAttributes extends HTMLAttributes {
      'color'?: string;
      'size'?: number;
      'x'?: number;
      'y'?: number;
    }
  }
}


declare global {
  interface HTMLOledScreenElement extends HTMLStencilElement {

  }
  var HTMLOledScreenElement: {
    prototype: HTMLOledScreenElement;
    new (): HTMLOledScreenElement;
  };
  interface HTMLElementTagNameMap {
    'oled-screen': HTMLOledScreenElement;
  }
  interface ElementTagNameMap {
    'oled-screen': HTMLOledScreenElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'oled-screen': JSXElements.OledScreenAttributes;
    }
  }
  namespace JSXElements {
    export interface OledScreenAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
